[[query-dsl-common-terms-query]]
=== 常用词查询

常用词查询是一种现代的停用词替代方案，它提升了搜索结果的精确度和召回率（通过把停用词考虑进去），
而不会牺牲性能。

[float]
==== 问题

查询中的每个词都会有资源消耗。搜索 `"The brown fox"` 需要三个词的查询，
每个查询分别对应 `"the"`， `"brown"` 和 `"fox"`，所有的这三个查询都会在索引中的所有文档里执行。
`"the"` 这个词的查询很可能会匹配很多文档，因此它与其他两个词相比，对相关性的影响要小的多。

以前，这个问题的解决方案是忽略高频词。通过把 `"the"` 作为一个停用词，来减少索引的大小和词查询的数量。

这种方法的问题在于，虽然停用词对相关性有很小的影响，但是它们仍然重要。如果我们去掉了停用词，
我们会失去精确度（例如我们无法区分 `"happy"` 和 `"not happy"`），
并且我们也会失去召回率（例如像 `"The The"` 或者 `"To be or not to be"`
这样的文本将根本不会存在于索引中）。

[float]
==== 解决方案

通用词查询会把查询词分成两组：更重要的（即低频词）和不太重要的（即先前已经是停用词的高频词）。

首先，它搜索与更重要的词匹配的文档。这些词在文档中较少出现，对相关性有更大的影响。

然后，它对不太重要的词（频繁出现并且对相关性的影响很小）执行第二个查询。它不计算所有匹配文档的相关性评分，
而是仅计算第一个查询匹配文档的评分。通过这种方式，高频词可以改善相关性的计算，而且可以节省资源。

如果一个查询都是高频词，那么单个查询会被作为一个 `AND` （连接）查询执行，也就是说，所有的词都是必需的。
尽管每一个词会匹配很多文档，但是词的组合会将结果集缩小到只有最相关的。
通过指定 <<query-dsl-minimum-should-match,`minimum_should_match`>> 参数，
单个查询也可以作为一个 `OR` 查询执行，这种情况下，这个参数应该设置一个足够高的值。

通过 `cutoff_frequency` 参数，来决定把词分配到高频组还是低频组，
这个参数可以被指定为绝对频率(`>=1`) 或者相对频率 (`0.0 .. 1.0`)。
（请记住，文档频率是按照每个分片级别计算的，
如博客文章{defguide}/relevance-is-broken.html[Relevance is broken]中所述。）

也许这类查询最有趣的特性是它可以自动地适应特定领域的停用词。例如，一个视频托管网站，
像 `"clip"` 或者 `"video"` 这样的常用词将自动地作为停用词，而不需要手动维护一个停用词列表。

[float]
==== 例子

在这个例子中，文档频率大于0.1%的单词（例如 `"this"` 和 `"is"`）将被视为常用词（ _common terms_）。

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "common": {
            "body": {
                "query": "this is bonsai cool",
                "cutoff_frequency": 0.001
            }
        }
    }
}
--------------------------------------------------
// CONSOLE

通过 <<query-dsl-minimum-should-match,`minimum_should_match`>>（`high_freq`, `low_freq`），
 `low_freq_operator` （默认 `"or"`）和 `high_freq_operator`（默认 `"or"`） 参数，
 可以控制应该匹配的词的数量。

对于低频词，把 `low_freq_operator` 设置为 `"and"` ，则所有的词都是必需的：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "common": {
            "body": {
                "query": "nelly the elephant as a cartoon",
                "cutoff_frequency": 0.001,
                "low_freq_operator": "and"
            }
        }
    }
}
--------------------------------------------------
// CONSOLE

这等同于：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "bool": {
            "must": [
            { "term": { "body": "nelly"}},
            { "term": { "body": "elephant"}},
            { "term": { "body": "cartoon"}}
            ],
            "should": [
            { "term": { "body": "the"}},
            { "term": { "body": "as"}},
            { "term": { "body": "a"}}
            ]
        }
    }
}
--------------------------------------------------
// CONSOLE

或者使用
<<query-dsl-minimum-should-match,`minimum_should_match`>>
来指定一个低频词必需存在的最小数量或者百分比，例如：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "common": {
            "body": {
                "query": "nelly the elephant as a cartoon",
                "cutoff_frequency": 0.001,
                "minimum_should_match": 2
            }
        }
    }
}
--------------------------------------------------
// CONSOLE

这等同于：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "bool": {
            "must": {
                "bool": {
                    "should": [
                    { "term": { "body": "nelly"}},
                    { "term": { "body": "elephant"}},
                    { "term": { "body": "cartoon"}}
                    ],
                    "minimum_should_match": 2
                }
            },
            "should": [
                { "term": { "body": "the"}},
                { "term": { "body": "as"}},
                { "term": { "body": "a"}}
                ]
        }
    }
}
--------------------------------------------------
// CONSOLE

minimum_should_match

通过使用附加的 `low_freq` 和 `high_freq` 参数，
可以让低频词和高频词使用不同的参数。以下是提供附加参数的例子（注意结构的变化）：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "common": {
            "body": {
                "query": "nelly the elephant not as a cartoon",
                "cutoff_frequency": 0.001,
                "minimum_should_match": {
                    "low_freq" : 2,
                    "high_freq" : 3
                }
            }
        }
    }
}
--------------------------------------------------
// CONSOLE

这等同于：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "bool": {
            "must": {
                "bool": {
                    "should": [
                    { "term": { "body": "nelly"}},
                    { "term": { "body": "elephant"}},
                    { "term": { "body": "cartoon"}}
                    ],
                    "minimum_should_match": 2
                }
            },
            "should": {
                "bool": {
                    "should": [
                    { "term": { "body": "the"}},
                    { "term": { "body": "not"}},
                    { "term": { "body": "as"}},
                    { "term": { "body": "a"}}
                    ],
                    "minimum_should_match": 3
                }
            }
        }
    }
}
--------------------------------------------------
// CONSOLE

在这种情况下，这意味着至少有三个高频词时，高频词才会对相关性有影响。但是对于高频词来说，
<<query-dsl-minimum-should-match,`minimum_should_match`>>
最有趣的用法是当只有高频词时：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "common": {
            "body": {
                "query": "how not to be",
                "cutoff_frequency": 0.001,
                "minimum_should_match": {
                    "low_freq" : 2,
                    "high_freq" : 3
                }
            }
        }
    }
}
--------------------------------------------------
// CONSOLE

这等同于：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "bool": {
            "should": [
            { "term": { "body": "how"}},
            { "term": { "body": "not"}},
            { "term": { "body": "to"}},
            { "term": { "body": "be"}}
            ],
            "minimum_should_match": "3<50%"
        }
    }
}
--------------------------------------------------
// CONSOLE

高频词生成的查询比使用 `AND` 查询的限制要稍微少一些。

常用词查询也支持 `boost` 和 `analyzer` 作为参数。
