[[query-dsl-match-query-phrase-prefix]]
=== 匹配短语前缀查询

`match_phrase_prefix` 和 `match_phrase` 相同，除了它允许对文本的最后一个词做前缀匹配外。
例如：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "match_phrase_prefix" : {
            "message" : "quick brown f"
        }
    }
}
--------------------------------------------------
// CONSOLE

它接受和短语查询一样的参数。此外，它也接受一个 `max_expansions` 参数（默认 `50`），
可以控制最后一个词做前缀匹配的数量。强烈建议设置一个合理的值以控制查询的执行时间。

译者注：prefix 查询存在严重的资源消耗问题，短语查询的这种方式也同样如此。
前缀可能会匹配成千上万的词，这不仅会消耗很多系统资源，而且结果的用处也不大。
所以 `max_expansions` 参数强烈建议设置。

例如：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "match_phrase_prefix" : {
            "message" : {
                "query" : "quick brown f",
                "max_expansions" : 10
            }
        }
    }
}
--------------------------------------------------
// CONSOLE

[IMPORTANT]
===================================================

`match_phrase_prefix` 查询是一个 poor-man's 自动完成。它非常容易使用，
让你使用即时搜索来快速开始，它的结果通过是足够好的，有时候也会令人困惑。

考虑查询字符串 `quick brown f`。这个查询用 `quick` 和 `brown`
（即单词 `quick` 必须存在并且必须紧跟着单词 `brown`）创建一个短语查询。然后它搜索以 `f`
开头按字典排序的前50个单词，并且把这些单词添加到短语查询中。

问题是前50个单词可能不包含单词 `fox` ，所以短语 `quick brown fox` 将不会被找到。
这通常不是问题，随着用户输入更多的字符，直到他们搜索的词出现。

对于即时搜索更好的解决方案，看 <<search-suggesters-completion,completion suggester>> 和
{defguide}/_index_time_search_as_you_type.html[Index-Time Search-as-You-Type]。
===================================================
