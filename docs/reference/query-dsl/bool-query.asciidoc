[[query-dsl-bool-query]]
=== Bool Query

一种匹配文档布尔条件的复合查询。这种布尔查询对应于 Lucene 的 `BooleanQuery`。
它包含一个或者多个布尔子句，每个子句都有特定的类型。类型如下：
[cols="<,<",options="header",]
|=======================================================================
|类型 |描述
|`must` |
返回的文档必须满足 must 子句的条件，并且会参与计算评分。

|`filter` |
返回的文档必须满足 filter 子句的条件，但是它和 must 的不同是，它不会参与计算评分。
Filter 子句在 <<query-filter-context,filter context>> 里被执行，
意味着不会参与计算评分，并且子句会被缓存起来。

|`should` |
返回的文档可能满足 should 子句的条件。如果布尔查询是在一个 <<query-filter-context,query context>>
中，并且有一个 `must` 或者 `filter` 子句，那么一个文档将会匹配这个布尔查询，即使 `should`
查询没有被匹配。 在这个例子里，这些子句只是被用来影响评分。如果布尔查询是在一个
<<query-filter-context,filter context>> 中或者没有 `must` ，也没有 `filter` ，那么这些
`should` 查询至少要有一个必须匹配到一个文档，才会返回。
<<query-dsl-minimum-should-match,`minimum_should_match`>>
设置这个参数可以显示的控制这种行为（至少满足几个 `should` 才会返回）。

|`must_not` |
返回的文档必须不满足 must_not 定义的条件。子句是在 <<query-filter-context,filter context>>
里被执行，意味着不会参与计算评分，并且子句会被缓存起来。因为评分被忽略，
所以返回的所有文档的评分都是 0。
|=======================================================================

[IMPORTANT]
.布尔查询在过滤上下文中
========================================================================
如果这个布尔查询在一个过滤上下文中被使用，并且它有 `should` 子句，那么它至少要有一个
 `should` 子句匹配到文档，才会返回。
========================================================================

布尔查询采用 _more-matches-is-better_ 方法，这样的话，每个匹配到 `must` or `should`
子句的分数将会被合并到一起以计算每个文档的最终分值。

[source,js]
--------------------------------------------------
POST _search
{
  "query": {
    "bool" : {
      "must" : {
        "term" : { "user" : "kimchy" }
      },
      "filter": {
        "term" : { "tag" : "tech" }
      },
      "must_not" : {
        "range" : {
          "age" : { "gte" : 10, "lte" : 20 }
        }
      },
      "should" : [
        { "term" : { "tag" : "wow" } },
        { "term" : { "tag" : "elasticsearch" } }
      ],
      "minimum_should_match" : 1,
      "boost" : 1.0
    }
  }
}
--------------------------------------------------
// CONSOLE

==== `bool.filter` 的分值计算

在 `filter` 元素下指定的查询对计算评分没有影响，分数以 `0` 的形式返回。
分数只会被特定的查询影响。例如，下面的三个查询都会返回 `status` 字段包含单词 `active` 的所有文档。

由于没有指定计算评分的查询，第一个查询会给所有的文档分配 `0` 评分。

[source,js]
---------------------------------
GET _search
{
  "query": {
    "bool": {
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
---------------------------------
// CONSOLE

这个布尔查询有一个 `match_all` 查询，这会给所有的文档分配 `1.0` 评分。

[source,js]
---------------------------------
GET _search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
---------------------------------
// CONSOLE

这个 `constant_score` 查询的效果和上面的第二个例子完全相同，
它会给匹配过滤器条件所有文档分配 `1.0` 评分。

[source,js]
---------------------------------
GET _search
{
  "query": {
    "constant_score": {
      "filter": {
        "term": {
          "status": "active"
        }
      }
    }
  }
}
---------------------------------
// CONSOLE

==== 使用 named queries 去查看那个子句条件被匹配了

如果你需要知道布尔查询里面的那个子句条件匹配了返回的文档，你能够使用
<<search-request-named-queries-and-filters,named queries>> 给每一个子句条件分配一个名字。
