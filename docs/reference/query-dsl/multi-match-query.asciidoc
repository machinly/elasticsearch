[[query-dsl-multi-match-query]]
=== 多匹配查询

`multi_match` 查询建立在 <<query-dsl-match-query,`match` 查询>> 之上，允许多字段查询：

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "multi_match" : {
      "query":    "this is a test", <1>
      "fields": [ "subject", "message" ] <2>
    }
  }
}
--------------------------------------------------
// CONSOLE
<1> 查询字符串。
<2> 被查询的字段。

[float]
==== `字段` 和字段提升

字段可以用通配符指定，例如：

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "multi_match" : {
      "query":    "Will Smith",
      "fields": [ "title", "*_name" ] <1>
    }
  }
}
--------------------------------------------------
// CONSOLE
<1> 查询 `title`, `first_name` and `last_name` 这三个字段。

单个字段可以使用符号 (`^`) 来提升权重：

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "multi_match" : {
      "query" : "this is a test",
      "fields" : [ "subject^3", "message" ] <1>
    }
  }
}
--------------------------------------------------
// CONSOLE

<1> `subject` 字段是 `message` 字段的三倍权重。默认权重为1。

如果没有 `fields` ，`multi_match` 查询默认为 `index.query.default_field` 的索引设置，
默认为 `*` 。这将会抽取映射中符合词查询的所有字段，并过滤元数据字段。然后，
所有被抽取的字段组合起来构建一个查询。

WARNING: 如果有大量的字段，上述的自动扩展可能导致查询大量的字段，这可能导致性能问题。
在未来的版本中（在7.0中有描述），一次最多可以查询1024个字段。

[[multi-match-types]]
[float]
==== `多匹配` 查询的类型：

`多匹配` 查询在内部执行的方式取决于 `type` 参数，它可以被设置为：

[horizontal]
`best_fields`::     (*默认*) 查找与任一字段匹配的文档，但是使用最优字段的 `_score` 。
                    请参阅 <<type-best-fields>> 。

`most_fields`::     查找与任一字段匹配的文档，并且把每个字段的 `_score` 组合起来。
                    请参阅 <<type-most-fields>> 。

`cross_fields`::    使用相同的 `分析器` 处理这些字段，仿佛他们是一个大字段。
                    查找任一字段中的每个词。请参阅 <<type-cross-fields>> 。

`phrase`::          Runs a `match_phrase` query on each field and uses the  `_score`
                    from the best field.  See <<type-phrase>>.

`phrase_prefix`::   在每一个字段上运行一个 `match_phrase_prefix` 查询，并且把每个字段的 `_score` 组合起来。
                    请参阅 <<type-phrase>> 。

[[type-best-fields]]
==== `最优字段`

当你正在搜索同一个字段中含有多个单词的最优查找时，这个 `最优字段` 最有用。
例如，``brown fox'' 单独在一个字段中比 ``brown'' 在一个字段中和 ``fox'' 在另一个字段中更有意义。

`最优字段` 会为每一个字段生成一个 <<query-dsl-match-query,`match` 查询>> ，
 并把他们封装到一个 <<query-dsl-dis-max-query,`dis_max`>> 查询中，以找到单个最优的匹配字段。
 例如，这个查询：

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "multi_match" : {
      "query":      "brown fox",
      "type":       "best_fields",
      "fields":     [ "subject", "message" ],
      "tie_breaker": 0.3
    }
  }
}
--------------------------------------------------
// CONSOLE

将被执行为：

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "dis_max": {
      "queries": [
        { "match": { "subject": "brown fox" }},
        { "match": { "message": "brown fox" }}
      ],
      "tie_breaker": 0.3
    }
  }
}
--------------------------------------------------
// CONSOLE

通常， `最优字段` 使用单个最优匹配字段的评分，但是如果指定了 `tie_breaker` ，
它会按照下面的方式计算评分：

  * 最优匹配字段的评分
  * 相加所有其他匹配字段的 `tie_breaker * _score`

另外，它也接受 `analyzer`, `boost`, `operator`, `minimum_should_match`,
`fuzziness`, `lenient`, `prefix_length`, `max_expansions`, `rewrite`, `zero_terms_query`,
 `cutoff_frequency`, `auto_generate_synonyms_phrase_query` and `fuzzy_transpositions` ，
 这些参数的含义和 <<query-dsl-match-query, match query>> 一样。

[IMPORTANT]
[[operator-min]]
.`operator` 和 `minimum_should_match`
===================================================

`best_fields` 和 `most_fields` 是以字段为中心的，每一个字段都会生成一个 `match` 查询。
这意味着 `operator` 和 `minimum_should_match` 参数会被分别应用到每个字段中，
这可能不是你想要的。

以这个查询为例：

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "multi_match" : {
      "query":      "Will Smith",
      "type":       "best_fields",
      "fields":     [ "first_name", "last_name" ],
      "operator":   "and" <1>
    }
  }
}
--------------------------------------------------
// CONSOLE

<1> 所有的词必须被提供

这个查询像下面这样执行：

      (+first_name:will +first_name:smith)
    | (+last_name:will  +last_name:smith)

换言之，单个字段必须满足所有词，才会匹配到文档。

请参阅 <<type-cross-fields>> 可以找到更好的解决方案。

===================================================

[[type-most-fields]]
==== `most_fields`

当正在查找以不同的方式分析包含相同文本的多个字段时， `most_fields` 是最有用的。例如，
主字段可以包含同义词，词干和没有变音符的词。第二字段可以包含原始词，第三字段可以包含 shingles 。
通过组合三个字段的评分，我们可以使用主字段匹配尽可能多的文档，
而使用第二和第三字段把最相似的结果推送到列表的顶部。

这个查询：

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "multi_match" : {
      "query":      "quick brown fox",
      "type":       "most_fields",
      "fields":     [ "title", "title.original", "title.shingles" ]
    }
  }
}
--------------------------------------------------
// CONSOLE

将会像下面这样执行：

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "bool": {
      "should": [
        { "match": { "title":          "quick brown fox" }},
        { "match": { "title.original": "quick brown fox" }},
        { "match": { "title.shingles": "quick brown fox" }}
      ]
    }
  }
}
--------------------------------------------------
// CONSOLE

每个 `match` 子句的评分被累加到一起，然后除以 `match` 的数量。

另外，它接受 accepts `analyzer`, `boost`, `operator`, `minimum_should_match`,
`fuzziness`, `lenient`, `prefix_length`, `max_expansions`, `rewrite`, `zero_terms_query`
and `cutoff_frequency`，这些参数的含义和 <<query-dsl-match-query,match query>> 一样，
请参阅 <<operator-min>> 。

[[type-phrase]]
==== `短语` 和 `短语前缀`

`短语` 和 `短语前缀` 的行为和 <<type-best-fields>> 很像，
但是它们会使用一个 `match_phrase` 或者 `match_phrase_prefix` 查询而不是 `match` 查询。

这个查询：
[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "multi_match" : {
      "query":      "quick brown f",
      "type":       "phrase_prefix",
      "fields":     [ "subject", "message" ]
    }
  }
}
--------------------------------------------------
// CONSOLE

将会像下面这样执行：

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "dis_max": {
      "queries": [
        { "match_phrase_prefix": { "subject": "quick brown f" }},
        { "match_phrase_prefix": { "message": "quick brown f" }}
      ]
    }
  }
}
--------------------------------------------------
// CONSOLE

另外，它接受 `analyzer`, `boost`, `lenient`, `slop` and `zero_terms_query` ，
这些参数的含义和 <<query-dsl-match-query>> 一样。
此外 `phrase_prefix` 还接受 `max_expansions` 。

[IMPORTANT]
[[phrase-fuzziness]]
.`phrase`, `phrase_prefix` 和 `fuzziness`
===================================================
`fuzziness` 参数不能和 `phrase` 或者 `phrase_prefix` 一起使用。
===================================================

[[type-cross-fields]]
==== `cross_fields`

`cross_fields` 在使用多个字段 *should* 匹配的结构化文档时特别有用。例如，
当查询 ``Will Smith'' 的 `first_name` 和 `last_name` 字段时，
最好的匹配很可能是 ``Will'' 在一个字段中， ``Smith'' 在另一个字段中。

****

这听起来像是 <<type-most-fields>> 的工作，但是那种方法有两个问题。
第一个问题是 `operator` 和 `minimum_should_match` 被应用于每一个字段，
而不是每一个词（请参阅 <<operator-min,explanation above>>）。

第二个问题与相关性有关：在 `first_name` 和 `last_name` 字段中的不同词频可能产生意外的结果。

例如，假设我们有两个人： ``Will Smith'' 和 ``Smith Jones'' 。
``Smith'' 作为姓氏很常见（因此重要性不高），而 ``Smith'' 作为名字非常罕见（因此重要性很高）。

如果我们搜索 ``Will Smith'' ， ``Smith Jones'' 的文档将极可能与 ``Will Smith'' 的匹配度更好，
因为 `first_name:smith` 的评分已经胜过了 `first_name:will` 加上 `last_name:smith` 的总评分。

****

处理这些类型查询的一种方式是简单的把 `first_name` 和 `last_name` 字段放到单个 `full_name` 字段的索引中，
当然，这只能在索引期间来做。

`cross_field` 尝试通过采用一种词中心的方法来解决查询时的这些问题。它首先把查询字符串分解成单个词，
然后在任一字段中查找每一个词，就像他们是一个大字段。

像这样的查询：

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "multi_match" : {
      "query":      "Will Smith",
      "type":       "cross_fields",
      "fields":     [ "first_name", "last_name" ],
      "operator":   "and"
    }
  }
}
--------------------------------------------------
// CONSOLE

被执行为：

    +(first_name:will  last_name:will)
    +(first_name:smith last_name:smith)

换言之，所有的词必须至少存在于一个字段中，才能匹配到文档。
（与 <<operator-min,the logic used for `best_fields` and `most_fields`>> 比较。）

哪解决了两个问题中的一个。不同词频的问题通过混合所有字段的词频来解决，以平衡差异。

实际上， `first_name:smith` 将被视为和 `last_name:smith` 有相同的频率，加一.
这将使得对 `first_name` 和 `last_name` 的匹配有可比较的评分，
对 `last_name` 有一个微小的优势，因为它是极有可能包含 `smith` 的字段。

请注意， `cross_fields` 通常只对 `boost` 为 `1` 的短字符串字段有用。
否则 boosts，词频和长度标准化有助于得分，这样的话混合词统计不再有任何意义。

如果你通过 <<search-validate>> 运行上面的查询，它会返回这样的解释：

    +blended("will",  fields: [first_name, last_name])
    +blended("smith", fields: [first_name, last_name])

另外，它接受 `analyzer`, `boost`, `operator`, `minimum_should_match`,
`lenient`, `zero_terms_query` and `cutoff_frequency`，
这些参数的含义和 <<query-dsl-match-query, match query>> 一样。

===== `cross_field` 和 分析

`cross_field` 只能在有相同分析器的字段上以词中心的模式工作。像上面例子里那样，
有相同分析器的字段被分到一个组。如果有多个组，他们用 `bool` 查询结合起来。

例如，如果我们有具有相同分析器的 `first` 和 `last` 字段，再加上都使用 `edge_ngram`
分析器的  `first.edge` 和 `last.edge` ，则此查询：

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "multi_match" : {
      "query":      "Jon",
      "type":       "cross_fields",
      "fields":     [
        "first", "first.edge",
        "last",  "last.edge"
      ]
    }
  }
}
--------------------------------------------------
// CONSOLE

将被像下面这样来执行：

        blended("jon", fields: [first, last])
    | (
        blended("j",   fields: [first.edge, last.edge])
        blended("jo",  fields: [first.edge, last.edge])
        blended("jon", fields: [first.edge, last.edge])
    )

换言之， `first` 和 `last` 将被分到一个组，当做一个独立的字段来处理， `first.edge` 和 `last.edge`
将被分到一个组，当做一个独立的字段来处理。

有多个组是好的，但是当结合 `operator` 或者 `minimum_should_match` 时，
它可能会有和 `most_fields` 或者 `best_fields` <<operator-min,一样的问题>> 。

通过结合一个 `bool` 查询，你可以很容易的将该查询重写为两个独立的 `cross_fields` 查询，
并应用 `minimum_should_match` 参数到他们中的一个：

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "bool": {
      "should": [
        {
          "multi_match" : {
            "query":      "Will Smith",
            "type":       "cross_fields",
            "fields":     [ "first", "last" ],
            "minimum_should_match": "50%" <1>
          }
        },
        {
          "multi_match" : {
            "query":      "Will Smith",
            "type":       "cross_fields",
            "fields":     [ "*.edge" ]
          }
        }
      ]
    }
  }
}
--------------------------------------------------
// CONSOLE

<1> `will` 或者  `smith` 必须有一个出现在 `first` 或者 `last` 的一个字段中

在查询中，通过指定 `analyzer` 参数，可以强制所有的字段进入同一个组。

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
   "multi_match" : {
      "query":      "Jon",
      "type":       "cross_fields",
      "analyzer":   "standard", <1>
      "fields":     [ "first", "last", "*.edge" ]
    }
  }
}
--------------------------------------------------
// CONSOLE

<1> 所有字段都使用 `standard` 分析器。

它将会像下面这样被执行：

    blended("will",  fields: [first, first.edge, last.edge, last])
    blended("smith", fields: [first, first.edge, last.edge, last])

===== `tie_breaker`

默认情况下，每个词的 `blended` 查询将使用一个组中的任意字段返回的最优评分，然后，
这些评分加在一起得到最终评分。 `tie_breaker` 参数可以改变每个词的 `blended` 查询的默认行为。
它接受：

[horizontal]
`0.0`::             从（例如）`first_name:will` 和 `last_name:will` 中获取单个最优评分(*默认*)

`1.0`::             把评分加在一起（例如）`first_name:will` 和 `last_name:will`

`0.0 < n < 1.0`::   取单个最优评分，然后加上 +tie_breaker+ 乘以其他匹配字段的每一个评分。

[IMPORTANT]
[[crossfields-fuzziness]]
.`cross_fields` 和 `fuzziness`
===================================================
`cross_fields` 不能使用 `fuzziness` 参数。
===================================================
