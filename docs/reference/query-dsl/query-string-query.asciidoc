[[query-dsl-query-string-query]]
=== 查询字符串查询

一种使用查询解析器解析其内容的查询。这是一个例子：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "query_string" : {
            "default_field" : "content",
            "query" : "this AND that OR thus"
        }
    }
}
--------------------------------------------------
// CONSOLE

`query_string` 查询解析输入，并在操作符周围拆分文本。每一个拆分后的文本彼此独立地被解析。
例如下面的查询：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "query_string" : {
            "default_field" : "content",
            "query" : "(new york city) OR (big apple)"
        }
    }
}
--------------------------------------------------
// CONSOLE

... 将会被拆成 `new york city` 和 `big apple`两部分，
然后每一部分根据为该字段配置的分析器独立地被分析。

WARNING: 空格不会被视为运算符，这意味着 `new york city` 将会原样传给为该字段配置的分析器，
如果这个字段是一个关键字字段，分析器将会把 `new york city` 作为一个单独的词，
并且查询构造器将会在查询中使用这个词。如果你想分别查询每一个词，你需要在词之间加上显示的运算符
（例如： `new AND york AND city`）

当提供多个字段的时候，可以通过 `type` 参数来实现不同效果的查询。
可能的方式在 <<multi-match-types, 这里>> 有描述，默认是 `best_fields` 。

`query_string` 最高级参数包括：

[cols="<,<",options="header",]
|=======================================================================
|参数 |描述
|`query` |实际的查询将被解析。请参考 <<query-string-syntax>>。

|`default_field` |如果没有指定前缀字段，默认是 `index.query.default_field` 的索引设置，
默认是 * 。`*` 会提取映射中符合词查询的所有字段，并过滤元数据字段。当没有前缀字段时，
所有被提取的字段组合在一起构建一个查询。

|`default_operator` |如果没有显示的指定运算符，则使用默认的运算符。例如，使用 `OR` 作为默认的运算符，
 `capital of Hungary` 这个查询会被替换成 `capital OR of OR Hungary` ，
 使用 `AND` 作为默认的运算符，则上面的查询将会被替换成 `capital AND of AND Hungary` 。
 默认是 `OR` 。

|`analyzer` |用于分析查询字符串的分析器的名称。

|`quote_analyzer` |用于分析查询字符串中引用短语的分析器的名称。对于这些部分，
它会覆盖其他使用了 `analyzer` 这个参数或者 <<search-quote-analyzer,`search_quote_analyzer`>>
配置的分析器。

|`allow_leading_wildcard` |当设置 * 或者 `?` 通配符是否被允许作为第一个字符的时候。默认是 `true` 。

|`enable_position_increments` |设置为 `true` 可以在结果查询用启用位置增量。默认是 `true` 。

|`fuzzy_max_expansions` |控制模糊查询可被扩展到的最大词数，默认 `50` 。

|`fuzziness` |设置模糊查询的模糊性。默认是 `AUTO` 。允许的设置，参阅 <<fuzziness>> 。

|`fuzzy_prefix_length` |设置模糊查询时的前缀长度。默认是 `0` 。

|`fuzzy_transpositions` |设置为 `false` 以禁用模糊转置 (`ab` -> `ba`) 。默认是 `true` 。

|`phrase_slop` |设置短语的默认间隔。如果是0，则需要精确匹配短语。默认是 `0` 。

|`boost` |设置查询的权重值。默认 `1.0` 。

|`auto_generate_phrase_queries` |默认 `false` 。

|`analyze_wildcard` |默认情况下，不分析查询字符串中的通配符。通过把这个值设为 `true` ，
将会尽可能的分析这些通配符。

|`max_determinized_states` |限制正则表达式查询时创建自动机状态的数量。
这可以防止太难（例如：指数级难度）的正则表达式。默认10000。

|`minimum_should_match` |在布尔查询结果中，控制多少个 "should" 子句将被匹配。
它可能是一个绝对值（`2`），一个百分比，或者一个 <<query-dsl-minimum-should-match,两者的组合>> 。

|`lenient` | 如果设置为 `true` ，将会忽略掉类型不匹配的异常（如向数字字段提供文本）。

|`time_zone` | 时区将会被应用于任何和日期相关的范围查询。也可参阅
http://www.joda.org/joda-time/apidocs/org/joda/time/DateTimeZone.html[JODA timezone]。

|`quote_field_suffix` | 附加到查询字符串的引用部分的字段的后缀。这允许使用具有不同分析链的字段进行精确匹配。
在 <<mixing-exact-search-with-stemming,这里>> 查看一个全面的例子。

|`auto_generate_synonyms_phrase_query` |是否应该为多个同义词自动生成短语查询。默认 `true` 。

|`all_fields` | 已废弃【6.0.0, `default_field` 被 * 代替】对可以查询的映射中检测到的所有字段执行查询。
当 `_all` 字段被禁用，并且（在索引设置或者请求体中）没有指定 `default_field` ，也没有指定 `fields` 时，
`all_fields` 将默认被使用。

|=======================================================================

在生成一个多词查询时，可以使用 <<query-dsl-multi-term-rewrite,重写>> 参数控制如何重写它。

[float]
==== 默认字段

如果没有在查询字符串语法中明确地指定要搜索的字段，将会使用 `index.query.default_field`
的配置，如果没有配置 `index.query.default_field` ，
`query_string` 将会自动地尝试确定索引映射中可查询的现有字段，并对这些字段执行搜索。请注意，
这将不包括嵌套文档，

[float]
==== 多字段

`query_string` 也能运行多个字段的查询。通过 `"fields"` 参数设置字段（下面是例子）。

多字段的 `query_string` 查询把每一个查询项扩展为一个OR子句，如下所示：

    field1:query_term OR field2:query_term | ...

例如，下面的查询

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "query_string" : {
            "fields" : ["content", "name"],
            "query" : "this AND that"
        }
    }
}
--------------------------------------------------
// CONSOLE

相当于下面的查询


[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "query_string": {
            "query": "(content:this OR name:this) AND (content:that OR name:that)"
        }
    }
}
--------------------------------------------------
// CONSOLE

由于从单个搜索项生成了多个查询，因此使用带有tie_breaker的 `dis_max` 查询自动地组合它们。
例如（ `name` 使用 `^5` 符号表示增强5）

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "query_string" : {
            "fields" : ["content", "name^5"],
            "query" : "this AND that OR thus",
            "tie_breaker" : 0
        }
    }
}
--------------------------------------------------
// CONSOLE

简单的通配符也能用于搜索特定的内部文档元素。例如，如果我们有一个 `city` 对象，
它包含多个字段（或者包含多个字段的内部对象），我们能够自动地搜索所有的 "city" 字段：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "query_string" : {
            "fields" : ["city.*"],
            "query" : "this AND that OR thus"
        }
    }
}
--------------------------------------------------
// CONSOLE

另一种选择是查询字符串本身提供通配符字段搜索（正确地转义 `*` 符号），
例如：`city.\*:something`：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "query_string" : {
            "query" : "city.\\*:(this AND that OR thus)"
        }
    }
}
--------------------------------------------------
// CONSOLE

NOTE: 由于 `\` （反斜杠）在json串中是一个特殊字符，因此需要对其转义，
因此上面 `query_string` 中有两个反斜杠。

对于多字段的 `query_string` 查询，允许使用以下的附加参数：

[cols="<,<",options="header",]
|=======================================================================
|参数 |描述

|`type` |应该如何组合字段以构建文本查询。完整示例，请参阅 <<multi-match-types, types>> 。
默认是 `best_fields`

|`tie_breaker` |这个参数的意义是将其他query的分数也考虑进去，默认是 `0`
|=======================================================================

字段参数也能包含基于通配符的字段名称，允许自动地扩展到相关字段（包括动态引入的字段）。例如：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "query_string" : {
            "fields" : ["content", "name.*^5"],
            "query" : "this AND that OR thus"
        }
    }
}
--------------------------------------------------
// CONSOLE

[float]
==== 同义词

`query_string` 支持使用 <<analysis-synonym-graph-tokenfilter,synonym_graph>>
标记过滤器进行多项同义词扩展。使用这个过滤器的时候，解析器会为每一个多项同义词创建一个短语查询。
例如，以下同义词： `"ny, new york" 将产生：`

`(ny OR ("new york"))`

也可以将多项同义词与连词相匹配：

[source,js]
--------------------------------------------------
GET /_search
{
   "query": {
       "query_string" : {
           "default_field": "title",
           "query" : "ny city",
           "auto_generate_synonyms_phrase_query" : false
       }
   }
}
--------------------------------------------------
// CONSOLE

上面的例子创建了一个布尔查询：

`(ny OR (new AND york)) city)`

使用词 `ny` 或者连词 `new AND york` 匹配文档的布尔查询。默认情况下，
参数 `auto_generate_synonyms_phrase_query` 设置为 `true`。

include::query-string-syntax.asciidoc[]
