[[query-dsl-simple-query-string-query]]
=== 简单查询字符串查询

使用 SimpleQueryParser 解析上下文的查询。与常规的 `query_string` 查询不同，
`simple_query_string` 查询绝不会抛出异常，并丢弃查询的无效部分。这是一个例子：

[source,js]
--------------------------------------------------
GET /_search
{
  "query": {
    "simple_query_string" : {
        "query": "\"fried eggs\" +(eggplant | potato) -frittata",
        "fields": ["title^5", "body"],
        "default_operator": "and"
    }
  }
}
--------------------------------------------------
// CONSOLE

`simple_query_string` 顶级参数包括：

[cols="<,<",options="header",]
|=======================================================================
|参数 |描述
|`query` | 要解析的实际查询. 请参阅下面的语法。

|`fields` | 要执行分析查询的字段。默认是索引设置的 `index.query.default_field` ,依次默认为 `*`，
`*` 会提取映射中符合词查询条件的所有字段，并过滤元数据字段。

|`default_operator` | 如果没有指定显式运算符，则使用默认运算符。例如，使用 `OR` 作为默认运算符，
查询 `capital of Hungary` 会被转换为 `capital OR of OR Hungary`，
使用 `AND` 作为默认运算符，前面的查询会被转换成 `capital AND of AND Hungary`。
默认值是 `OR`。

|`analyzer` | 在创建复合查询时，强制分析器分析查询的每个词。

|`flags` | 指定 `simple_query_string` 的哪些功能启用的标志。默认是 `ALL`。

|`analyze_wildcard` | 前缀词查询是否应该自动地分析。如果为 `true` ，将尽最大努力分析前缀。
然而，仅基于词的前缀，有些分析器无法提供有意义的结果。

|`lenient` | 如果设置为 `true` ，将会导致格式失败（如给数字字段一个文本值）被忽略。

|`minimum_should_match` | 子句必须匹配文档的最小数量。完整的选项列表，
请参阅 <<query-dsl-minimum-should-match,`minimum_should_match`>> 文档。

|`quote_field_suffix` | 一个附加到字段的后缀，用于查询字符串的引用部分。这允许使用有不同分析链的字段来做精确匹配。
<<mixing-exact-search-with-stemming,这里>> 有一个综合的示例。

|`auto_generate_synonyms_phrase_query` |对于多项同义词，是否自动生成短语查询。默认是 `true`。

|`all_fields` | 不推荐使用[6.0.0, 可以把 `default_field` 设置为 `*` 来代替它]，
对映射中检测到的所有字段执行查询。当 `_all` 字段被禁用，
没有指定 `default_field`（在索引设置中或者在请求体内），
并且 `fields` 也没有指定时，默认被使用。

|`fuzzy_prefix_length` |设置模糊查询的前缀长度。默认是 `0`。

|`fuzzy_max_expansions` |控制词模糊查询可以扩展的数量。默认是 `50`。

|`fuzzy_transpositions` |设置为 `false` 可以禁止模糊转置（`ab` -> `ba`）。默认是 `true`。

|=======================================================================

[float]
===== 简单查询字符串语法
`simple_query_string` 支持以下特殊字符：

* `+` 表示 AND 操作
* `|` 表示 OR 操作
* `-` 使一个词无效
* `"` 包装一些词以表示要搜索的短语
* `*` 在词的末尾表示前缀查询
* `(` 和 `)` 表示优先权
* `~N` 在单词后面表示编辑距离（模糊）
* `~N` 在短语后面表示坡度

为了搜索这些特殊字符，它们需要使用 `\` 来转义。

请注意，这个语法可能有不同的行为，这取决于 `default_operator` 值。例如，考虑下以下查询：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "simple_query_string" : {
            "fields" : ["content"],
            "query" : "foo bar -baz"
        }
    }
}
--------------------------------------------------
// CONSOLE

你可能期望返回只包含 "foo" 或者 "bar"，不包含 "baz" 的文档，但是，
由于 `default_operator` 为 OR，这实际上意味着匹配包含 "foo" 或者  "bar"
或者不包含 "baz" 的文档。如果这是无意义的，那么可以切换到 `"foo bar +-baz"`，
将不会返回包含 "baz" 的文档。

[float]
==== 默认字段
在查询字符串语法中，当没有明确指定要搜索的字段时，将会从 `index.query.default_field`
获取要搜索的字段。默认为 `*` ，查询将自动尝试确定索引映射中可查询的现有字段，
并在这些字段上执行搜索。


[float]
==== 多字段
字段参数也可以包含基于模式的字段名称，允许自动扩展到相关字段（包括动态引入的字段）。例如：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "simple_query_string" : {
            "fields" : ["content", "name.*^5"],
            "query" : "foo bar baz"
        }
    }
}
--------------------------------------------------
// CONSOLE

[float]
==== 标记
`simple_query_string` 支持使用多种标记来指定哪些解析功能应该启用。
用 `|` 来分割使用的标记参数：

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "simple_query_string" : {
            "query" : "foo | bar + baz*",
            "flags" : "OR|AND|PREFIX"
        }
    }
}
--------------------------------------------------
// CONSOLE

可用的标记是： `ALL`, `NONE`, `AND`, `OR`, `NOT`, `PREFIX`, `PHRASE`,
`PRECEDENCE`, `ESCAPE`, `WHITESPACE`, `FUZZY`, `NEAR`, and `SLOP`.

[float]
==== 同义词

`simple_query_string` 查询支持使用 <<analysis-synonym-graph-tokenfilter,
synonym_graph>> 令牌过滤器进行多项同义词扩展。使用这个过滤器时，
解析器会为每一个多项同义词创建一个短语查询。例如，以下同义词： "ny, new york" 将产生：

`(ny OR ("new york"))`

也可以使用连词来匹配多项同义词：

[source,js]
--------------------------------------------------
GET /_search
{
   "query": {
       "simple_query_string" : {
           "query" : "ny city",
           "auto_generate_synonyms_phrase_query" : false
       }
   }
}
--------------------------------------------------
// CONSOLE

上面的示例创建了一个布尔查询：

`(ny OR (new AND york)) city)`

它用词 `ny` 或者 `new york` 匹配文档。默认情况下，
参数 `auto_generate_synonyms_phrase_query` 设置为 `true`。
