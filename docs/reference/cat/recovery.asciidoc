[[cat-recovery]]
== cat recovery

`recovery` 命令是索引分片恢复的视图，包括正在进行和以前完成。
它是 <<indices-recovery,recovery>> API 更加紧凑的视图。

每当索引分片移动到集群中的其他节点时，都会触发恢复事件。
这可能发生在快照恢复，副本更改，节点故障或节点启动过程中。
最后一种类型称为本地存储恢复，是节点启动时从磁盘加载分片的常用方式。

作为一个例子，这里是当从一个节点到另一个节点不存在任何碎片时集群恢复状态的样子：

[source,js]
----------------------------------------------------------------------------
GET _cat/recovery?v
----------------------------------------------------------------------------
// CONSOLE
// TEST[setup:twitter]

这个请求的响应会是这样的：

[source,txt]
---------------------------------------------------------------------------
index   shard time type  stage source_host source_node target_host target_node repository snapshot files files_recovered files_percent files_total bytes bytes_recovered bytes_percent bytes_total translog_ops translog_ops_recovered translog_ops_percent
twitter 0     13ms store done  n/a         n/a         127.0.0.1   node-0      n/a        n/a      0     0               100%          13          0     0               100%          9928        0            0                      100.0%
---------------------------------------------------------------------------
// TESTRESPONSE[s/store/empty_store/]
// TESTRESPONSE[s/100%/0.0%/]
// TESTRESPONSE[s/9928/0/]
// TESTRESPONSE[s/13ms/\\d+m?s/]
// TESTRESPONSE[s/13/\\d+/ _cat]

在上述情况下，源节点和目标节点相同，因为恢复类型是 store ，即它们是在节点启动时从本地存储中读取的。

现在让我们看看现场恢复的样子。通过增加我们索引的副本数量和使另一个节点在线以承载副本，我们可以看到实时分片恢复的效果。

[source,js]
----------------------------------------------------------------------------
GET _cat/recovery?v&h=i,s,t,ty,st,shost,thost,f,fp,b,bp
----------------------------------------------------------------------------
// CONSOLE
// TEST[setup:twitter]

这将返回以下行：

[source,txt]
----------------------------------------------------------------------------
i       s t      ty   st    shost       thost       f     fp      b bp
twitter 0 1252ms peer done  192.168.1.1 192.168.1.2 0     100.0%  0 100.0%
----------------------------------------------------------------------------
// TESTRESPONSE[s/peer/empty_store/]
// TESTRESPONSE[s/192.168.1.2/127.0.0.1/]
// TESTRESPONSE[s/192.168.1.1/n\/a/]
// TESTRESPONSE[s/100.0%/0.0%/]
// TESTRESPONSE[s/1252/\\d+/ _cat]

我们可以在上面的列表中看到，我们的 twitter 分片已从另一个节点恢复。
请注意，恢复类型显示为 `peer` 。
所复制的文件和字节都是实时测量的结果。

最后，让我们看看快照恢复的样子。
假设我以前做过索引的备份，
我可以使用  <<modules-snapshots,snapshot and restore>> API 来恢复它。

[source,js]
--------------------------------------------------------------------------------
GET _cat/recovery?v&h=i,s,t,ty,st,rep,snap,f,fp,b,bp
--------------------------------------------------------------------------------
// CONSOLE
// TEST[skip:no need to execute snapshot/restore here]

这将在响应中显示恢复类型为 snapshot 。

[source,txt]
--------------------------------------------------------------------------------
i       s t      ty       st    rep     snap   f  fp   b     bp
twitter 0 1978ms snapshot done  twitter snap_1 79 8.0% 12086 9.0%
--------------------------------------------------------------------------------
// TESTRESPONSE[_cat]
