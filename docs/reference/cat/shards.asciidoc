[[cat-shards]]
== cat shards

`shards` 命令是哪些节点包含哪些分片的详细视图。它将会告诉你，是否是主分片或是副本，文档数量，磁盘上的字节数以及它所在的节点。

在这里，我们看到一个索引，其中包含一个主碎片，没有副本：

[source,js]
---------------------------------------------------------------------------
GET _cat/shards
---------------------------------------------------------------------------
// CONSOLE
// TEST[setup:twitter]

这将返回

[source,txt]
---------------------------------------------------------------------------
twitter 0 p STARTED 3014 31.1mb 192.168.56.10 H5dfFeA
---------------------------------------------------------------------------
// TESTRESPONSE[s/3014/\\d+/]
// TESTRESPONSE[s/31.1mb/\\d+(\.\\d+)?[kmg]?b/]
// TESTRESPONSE[s/192.168.56.10/.*/]
// TESTRESPONSE[s/H5dfFeA/node-0/ _cat]

[float]
[[index-pattern]]
=== Index pattern

如果你有许多分片，你希望限制输出中显示的索引。
你总是可以用 `grep` 来做到这一点，但是你可以通过提供索引模式来节省一些带宽。

[source,js]
---------------------------------------------------------------------------
GET _cat/shards/twitt*
---------------------------------------------------------------------------
// CONSOLE
// TEST[setup:twitter]

这将返回以下内容

[source,txt]
---------------------------------------------------------------------------
twitter 0 p STARTED 3014 31.1mb 192.168.56.10 H5dfFeA
---------------------------------------------------------------------------
// TESTRESPONSE[s/3014/\\d+/]
// TESTRESPONSE[s/31.1mb/\\d+(\.\\d+)?[kmg]?b/]
// TESTRESPONSE[s/192.168.56.10/.*/]
// TESTRESPONSE[s/H5dfFeA/node-0/ _cat]


[float]
[[relocation]]
=== Relocation

假设你检查了集群的健康状况，并且看到了重新分配中的分片。
他们从哪里来，他们去哪里？

[source,js]
---------------------------------------------------------------------------
GET _cat/shards
---------------------------------------------------------------------------
// CONSOLE
// TEST[skip:for now, relocation cannot be recreated]

重新移动的分片将显示如下

[source,txt]
---------------------------------------------------------------------------
twitter 0 p RELOCATING 3014 31.1mb 192.168.56.10 H5dfFeA -> -> 192.168.56.30 bGG90GE
---------------------------------------------------------------------------
// TESTRESPONSE[_cat]

[float]
[[states]]
=== Shard states

在使用分片之前，它会经历一个 `INITIALIZING` 状态。 `shards` 可以告诉你是哪一个。

[source,js]
---------------------------------------------------------------------------
GET _cat/shards
---------------------------------------------------------------------------
// CONSOLE
// TEST[skip:there is no guarantee to test for shards in initializing state]

你可以像这样在响应中获得初始化状态

[source,txt]
---------------------------------------------------------------------------
twitter 0 p STARTED      3014 31.1mb 192.168.56.10 H5dfFeA
twitter 0 r INITIALIZING    0 14.3mb 192.168.56.30 bGG90GE
---------------------------------------------------------------------------
// TESTRESPONSE[_cat]

如果无法分配分片，例如，你已经为集群中分配的副本数量超过了节点数量，
那么分片将保持 `UNASSIGNED` 因为 <<reason-unassigned,reason code>> `ALLOCATION_FAILED` 。

你可以使用 shards API 找出原因。

[source,js]
---------------------------------------------------------------------------
GET _cat/shards?h=index,shard,prirep,state,unassigned.reason
---------------------------------------------------------------------------
// CONSOLE
// TEST[skip:for now]

未分配分片的原因将被列于最后一个字段

[source,txt]
---------------------------------------------------------------------------
twitter 0 p STARTED    3014 31.1mb 192.168.56.10 H5dfFeA
twitter 0 r STARTED    3014 31.1mb 192.168.56.30 bGG90GE
twitter 0 r STARTED    3014 31.1mb 192.168.56.20 I8hydUG
twitter 0 r UNASSIGNED ALLOCATION_FAILED
---------------------------------------------------------------------------
// TESTRESPONSE[_cat]

[float]
[[reason-unassigned]]
=== Reasons for unassigned shard

这些可能是分片处于未分配状态的原因：

[horizontal]
`INDEX_CREATED`::           由于创建索引的 API 而未分配。
`CLUSTER_RECOVERED`::       由于整个集群恢复而未分配。
`INDEX_REOPENED`::          由于打开已关闭索引而未分配。
`DANGLING_INDEX_IMPORTED`:: 由于导入到 dangling index 而未分配。
`NEW_INDEX_RESTORED`::      由于恢复到新索引而未分配。
`EXISTING_INDEX_RESTORED`:: 由于恢复到已关闭的索引而未分配。
`REPLICA_ADDED`::           由于明确添加副本而未分配。
`ALLOCATION_FAILED`::       由于分片分配失败而未分配。
`NODE_LEFT`::               由于承载它的节点离开集群而未分配。
`REROUTE_CANCELLED`::       由于显式取消 reroute 命令而未分配。
`REINITIALIZED`::           当分片从开始移动回到初始化时，例如，使用 shadow replicas 。
`REALLOCATED_REPLICA`::     确定更好的副本位置并使现有的副本分配被取消。
