[[cat-health]]
== cat health

`health` 是来自 `/_cluster/health` 的相同信息的简洁表达。

[source,js]
--------------------------------------------------
GET /_cat/health?v
--------------------------------------------------
// CONSOLE
// TEST[s/^/PUT twitter\n{"settings":{"number_of_replicas": 0}}\n/]

[source,txt]
--------------------------------------------------
epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent
1475871424 16:17:04  elasticsearch green           1         1      5   5    0    0        0             0                  -                100.0%
--------------------------------------------------
// TESTRESPONSE[s/1475871424 16:17:04/\\d+ \\d+:\\d+:\\d+/]
// TESTRESPONSE[s/elasticsearch/[^ ]+/ s/0                  -/\\d+ (-|\\d+(\\.\\d+)?[ms]+)/ _cat]

它有一个选项 `ts` 来禁用时间戳：

[source,js]
--------------------------------------------------
GET /_cat/health?v&ts=false
--------------------------------------------------
// CONSOLE
// TEST[s/^/PUT twitter\n{"settings":{"number_of_replicas": 0}}\n/]

结果如下：

[source,txt]
--------------------------------------------------
cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent
elasticsearch green           1         1      5   5    0    0        0             0                  -                100.0%
--------------------------------------------------
// TESTRESPONSE[s/elasticsearch/[^ ]+/ s/0                  -/\\d+ (-|\\d+(\\.\\d+)?[ms]+)/ _cat]

此命令一个常见的用途是验证节点的运行状况是否一致：

[source,sh]
--------------------------------------------------
% pssh -i -h list.of.cluster.hosts curl -s localhost:9200/_cat/health
[1] 20:20:52 [SUCCESS] es3.vm
1384309218 18:20:18 foo green 3 3 3 3 0 0 0 0
[2] 20:20:52 [SUCCESS] es1.vm
1384309218 18:20:18 foo green 3 3 3 3 0 0 0 0
[3] 20:20:52 [SUCCESS] es2.vm
1384309218 18:20:18 foo green 3 3 3 3 0 0 0 0
--------------------------------------------------
// NOTCONSOLE

一种少见的用途是随着时间追踪大型集群的恢复。
有了足够的碎片后，在启动集群，甚至在丢失节点后恢复，需要耗费时间（取决于你的网络和磁盘）。
跟踪其进度的一种方法是在延迟循环中使用此命令：

[source,sh]
--------------------------------------------------
% while true; do curl localhost:9200/_cat/health; sleep 120; done
1384309446 18:24:06 foo red 3 3 20 20 0 0 1812 0
1384309566 18:26:06 foo yellow 3 3 950 916 0 12 870 0
1384309686 18:28:06 foo yellow 3 3 1328 916 0 12 492 0
1384309806 18:30:06 foo green 3 3 1832 916 4 0 0
^C
--------------------------------------------------
// NOTCONSOLE

在这种情况下，我们可以看出恢复需要大约四分钟的时间。
如果这种情况持续数小时，我们将能够看到 `UNASSIGNED` 碎片急剧下降。
如果这个数字保持不变，我们则会认为这是一个问题。

[float]
[[timestamp]]
=== Why the timestamp?

当集群发生故障时，你通常使用 `health` 命令。
在此期间，关联活动的访问日志文件，系统报警等非常重要。

这里有两个输出：
 `HH:MM:SS` 输出是简单的，方便人们识别。
 epoch 时间保留更多信息，包括日期，如果你的恢复时间跨度在几天内，则可以通过机器进行排序。
