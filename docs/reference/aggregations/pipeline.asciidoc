[[search-aggregations-pipeline]]

== Pipeline（管道）聚合

pipeline 聚合工作在其他聚合输出生成物的地方，而不是直接处理文档，它用于向输出树中添加信息。pipeline 聚合有很多不同的类型，它们为其他聚合处理各种各样的信息，但是这么多的类型可以大致分为两类：

_Parent（父辈）_::
                这类管道聚合包含了 paraent 聚合的输出，它可以为已经存在的 bucket 添加新计算的 bucket 或者新的聚合。
_Sibling（同辈）_::
                这一类管道聚合会提供 sibling 聚合的输出，同时它可以计算一个新的聚合，新的聚合会在作为 sibling 聚合出现在同一级。

pipeline 聚合可以通过使用 `buckets_path` 参数来指定执行计算指标所需聚合的路径。定义这些路径的语法可以在下面的 <<buckets-path-syntax, `buckets_path` 语法>> 部分找到。

pipeline 聚合不能使用子聚合，但是它根据类型的区分可以使用 `buckets_path` 来链接其他 pipeline 聚合。例如，你可以链接其他两个导数计算二阶导数（即导数的导数）。

NOTE: 由于 pipeline 聚合仅将数据合并输出，因此在链接 pipeline 聚合时，最终输出将包含每个 pipeline 聚合的输出。

[[buckets-path-syntax]]
[float]
=== `buckets_path` 语法

大多数 pipeline 聚合需要另一个聚合作为输入。输入聚合是通过 `buckets_path` 参数定义的，该参数遵循特定的格式：

// https://zh.wikipedia.org/wiki/%E6%89%A9%E5%B1%95%E5%B7%B4%E7%A7%91%E6%96%AF%E8%8C%83%E5%BC%8F
[source,ebnf]
--------------------------------------------------
AGG_SEPARATOR       =  '>' ;
METRIC_SEPARATOR    =  '.' ;
AGG_NAME            =  <聚合的名称> ;
METRIC              =  <指标的名称(对于多指标聚合)> ;
PATH                =  <AGG_NAME> [ <AGG_SEPARATOR>, <AGG_NAME> ]* [ <METRIC_SEPARATOR>, <METRIC> ] ;
--------------------------------------------------

例如，路径 `"my_bucket>my_stats.avg"` 会将 `avg` 的值指定为 `"my_stats"` 的指标，它包含在名为 `“my_bucket”` 的 bucket 聚合中。

path 参数是对 pipline 聚合的相对位置；参数中不能填入绝对路径，而且路径无法被上一级的聚合调用。例如，这个移动平均值嵌入到了一个 date_histogram 中，并且引用了一个 sibling 聚合的指标 `"the_sum"`：

[source,js]
--------------------------------------------------
POST /_search
{
    "aggs": {
        "my_date_histo":{
            "date_histogram":{
                "field":"timestamp",
                "interval":"day"
            },
            "aggs":{
                "the_sum":{
                    "sum":{ "field": "lemmings" } <1>
                },
                "the_movavg":{
                    "moving_avg":{ "buckets_path": "the_sum" } <2>
                }
            }
        }
    }
}
--------------------------------------------------
// CONSOLE
// TEST[warning: moving_avg 聚合已经被废弃了，取而代之的是 moving_fn 聚合。]
<1> 这个指标名称为 `"the_sum"`
<2> The `buckets_path` 通过相对路径引用 `"the_sum"` 

`buckets_path` 也可用于 sibling pipeline 聚合，这些聚合会变成 bucket 的 "next" 聚合，而不是嵌入到这些 bucket 中。例如，`max_bucket` 聚合使用 `buckets_path` 指定了嵌入到 sibling 聚合中的指标：

[source,js]
--------------------------------------------------
POST /_search
{
    "aggs" : {
        "sales_per_month" : {
            "date_histogram" : {
                "field" : "date",
                "interval" : "month"
            },
            "aggs": {
                "sales": {
                    "sum": {
                        "field": "price"
                    }
                }
            }
        },
        "max_monthly_sales": {
            "max_bucket": {
                "buckets_path": "sales_per_month>sales" <1>
            }
        }
    }
}
--------------------------------------------------
// CONSOLE
// TEST[setup:sales]
<1> `buckets_path` 指定了使用 `max_bucket` 聚合嵌入到 `sales_per_month` 日期直方图中，这个聚合会取出 `sales` 聚合中的最大值。
`buckets_path` instructs this max_bucket aggregation that we want the maximum value of the `sales` aggregation in the
`sales_per_month` date histogram.

[float]
=== 特殊路径

`buckets_path` 可以使用一个特殊的 `"_count"` 路径，它可以将路径替换为一个指标。这将使用 pipline aggregation 文档的 count 值作为输入参数。例如，可以用每个 bucket 的文档数量来计算移动平均值，而不是用一个特定的指标。

[source,js]
--------------------------------------------------
POST /_search
{
    "aggs": {
        "my_date_histo": {
            "date_histogram": {
                "field":"timestamp",
                "interval":"day"
            },
            "aggs": {
                "the_movavg": {
                    "moving_avg": { "buckets_path": "_count" } <1>
                }
            }
        }
    }
}
--------------------------------------------------
// CONSOLE
// TEST[warning: moving_avg 聚合已经被废弃了，取而代之的是 moving_fn 聚合。]
<1> 通过使用 `_count` 替换指标名，我们可以计算直方图中的文档数量的移动平均值。

`buckets_path` 也可以使用 `_bucket_count` 和多桶聚合的路径，以使该聚合在管道聚合中返回桶数，而不是返回一个指标。例如，可以在此处使用 `bucket_selector` 过滤掉不包含 terms 聚合的 bucket：

[source,js]
--------------------------------------------------
POST /sales/_search
{
  "size": 0,
  "aggs": {
    "histo": {
      "date_histogram": {
        "field": "date",
        "interval": "day"
      },
      "aggs": {
        "categories": {
          "terms": {
            "field": "category"
          }
        },
        "min_bucket_selector": {
          "bucket_selector": {
            "buckets_path": {
              "count": "categories._bucket_count" <1>
            },
            "script": {
              "source": "params.count != 0"
            }
          }
        }
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
// TEST[setup:sales]
<1> By using `_bucket_count` instead of a metric name, we can filter out `histo` buckets where they contain no buckets for the `categories` aggregation
<1> 通过使用 `_bucket_count` 而不是度量名，我们可以过滤掉 `histo` bucket 中不包含 `categories` 聚合的 bucket。

[[dots-in-agg-names]]
[float]
=== 处理聚合名称中的点

有一种替代的语法用来支持在聚合或指标名称中加入点，比如 ++99.9++th<<search-aggregations-metrics-percentile-aggregation,百分位数>>。这种指标课参考如下格式:

[source,js]
---------------
"buckets_path": "my_percentile[99.9]"
---------------
// NOTCONSOLE

[[gap-policy]]
[float]
=== 处理数据中的空值

现实世界的数据通常是嘈杂的，有些数据中可能会包含空值 -- 数据根本不存在。这可能有各种各样的原因，最常见的是：

* 文档落入的 bucket 没有包含所需的字段
* 一个或多个 bucket 没有匹配到文档 holtwinters
* 可能因为一个相关 bucket 的值丢失了，导致正在计算的指标无法生成值。有的管道聚合必须满足一些特定的要求(例如，由于没有第一个值，无法对第一个指标进行求导，HoltWinters 移动平均线需要 “预热” 数据才能开始计算，等等)

Gap 策略是管道聚合的一种处理数据缺失的机制。所有管道聚合都可以接受 "gap_policy" 参数。目前有两种 gap 策略可供选择:

_skip_::
                此选项将缺少的数据视为 bucket 不存在。它将跳过 bucket 并继续使用下一个可用的值进行计算。

_insert_zeros_::
                This option will replace missing values with a zero (`0`) and pipeline aggregation computation will
                proceed as normal.
                此选项将用 (`0`) 替换缺失的值，以保证管道聚合计算正常进行。




include::pipeline/avg-bucket-aggregation.asciidoc[]
include::pipeline/derivative-aggregation.asciidoc[]
include::pipeline/max-bucket-aggregation.asciidoc[]
include::pipeline/min-bucket-aggregation.asciidoc[]
include::pipeline/sum-bucket-aggregation.asciidoc[]
include::pipeline/stats-bucket-aggregation.asciidoc[]
include::pipeline/extended-stats-bucket-aggregation.asciidoc[]
include::pipeline/percentiles-bucket-aggregation.asciidoc[]
include::pipeline/movavg-aggregation.asciidoc[]
include::pipeline/movfn-aggregation.asciidoc[]
include::pipeline/cumulative-sum-aggregation.asciidoc[]
include::pipeline/bucket-script-aggregation.asciidoc[]
include::pipeline/bucket-selector-aggregation.asciidoc[]
include::pipeline/bucket-sort-aggregation.asciidoc[]
include::pipeline/serial-diff-aggregation.asciidoc[]
