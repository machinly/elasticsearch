
[[caching-heavy-aggregations]]
== 缓存频繁聚合

频繁使用的聚合（例如，为网站首页提供展示数据）可以进行缓存以优化响应速度。这些缓存的结果与未缓存的聚合产生的结果是一致的，你永远不会得到过时的结果。

想了解更多的内容可以查看 <<shard-request-cache>> .

[[returning-only-agg-results]]
== 仅返回聚合的结果

在很多场景中只需要聚合的结果而不需要搜索的结果。对于这些情况，可以通过设置 `size=0` 来忽略搜索的内容。例如：

[source,js]
--------------------------------------------------
GET /twitter/_search
{
  "size": 0,
  "aggregations": {
    "my_agg": {
      "terms": {
        "field": "text"
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
// TEST[setup:twitter]

将 `size` 设置为 `0` 可以避免执行搜索的提取阶段，从而提高请求的执行效率。

[[agg-metadata]]
== 聚合元数据

在进行请求时你可以将一段元数据与一项聚合关联起来，这样他们在响应时将一起返回。

思考下面这个示例，我们要将颜色值蓝色与聚合 `terms` 关联起来。

[source,js]
--------------------------------------------------
GET /twitter/_search
{
  "size": 0,
  "aggs": {
    "titles": {
      "terms": {
        "field": "title"
      },
      "meta": {
        "color": "blue"
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
// TEST[setup:twitter]

然后这一段元数据将出现在标题为 `title` 的 `terms` 聚合里。

[source,js]
--------------------------------------------------
{
    "aggregations": {
        "titles": {
            "meta": {
                "color" : "blue"
            },
            "doc_count_error_upper_bound" : 0,
            "sum_other_doc_count" : 0,
            "buckets": [
            ]
        }
    },
    ...
}
--------------------------------------------------
// TESTRESPONSE[s/\.\.\./"took": "$body.took", "timed_out": false, "_shards": "$body._shards", "hits": "$body.hits"/]

 
[[returning-aggregation-type]]
== 返回聚合的类型

某些时候为了分析聚合结果，你需要知道它确切的类型。参数 `typed_keys` 可以用于更改响应内容中聚合的名称，可以使用这个特性将内部类型作为前缀返回.

下面例子中，有一个 <<search-aggregations-bucket-datehistogram-aggregation,`date_histogram` 聚合>> 名为 `tweets_over_time`，它有一个子聚合 <<search-aggregations-metrics-top-hits-aggregation, 'top_hits` 聚合>> 名为 `top_users`：

[source,js]
--------------------------------------------------
GET /twitter/_search?typed_keys
{
  "aggregations": {
    "tweets_over_time": {
      "date_histogram": {
        "field": "date",
        "interval": "year"
      },
      "aggregations": {
        "top_users": {
            "top_hits": {
                "size": 1
            }
        }
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
// TEST[setup:twitter]

在响应的内容中，聚合名分别会变为 `date_histogram#tweets_over_time` 和 `top_hits#top_users`，以反应每个聚合的内部类型：

[source,js]
--------------------------------------------------
{
    "aggregations": {
        "date_histogram#tweets_over_time": { <1>
            "buckets" : [
                {
                    "key_as_string" : "2009-01-01T00:00:00.000Z",
                    "key" : 1230768000000,
                    "doc_count" : 5,
                    "top_hits#top_users" : {  <2>
                        "hits" : {
                            "total" : 5,
                            "max_score" : 1.0,
                            "hits" : [
                                {
                                  "_index": "twitter",
                                  "_type": "_doc",
                                  "_id": "0",
                                  "_score": 1.0,
                                  "_source": {
                                    "date": "2009-11-15T14:12:12",
                                    "message": "trying out Elasticsearch",
                                    "user": "kimchy",
                                    "likes": 0
                                  }
                                }
                            ]
                        }
                    }
                }
            ]
        }
    },
    ...
}
--------------------------------------------------
// TESTRESPONSE[s/\.\.\./"took": "$body.took", "timed_out": false, "_shards": "$body._shards", "hits": "$body.hits"/]

<1> 原来名称为 `tweets_over_time` 的现在包含了前缀 `date_histogram` .
<2> 原来名称为 `top_users` 的现在包含了前缀 `top_hits` .

NOTE: 对于某些聚合来说，可能它反回的类型和请求时提供的类型不同。Terms，Significant Terms 还有百分数（Percentiles）聚合就是这种情况，它们返回的类型中还包含了目标字段类型的信息：`lterms` （支持 Long 字段的 terms 聚合）， `sigsterms` （支持 String 字段的 significant terms 聚合），`tdigest_percentiles` （基于 TDigest 算法的百分数聚合）。
