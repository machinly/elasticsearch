[[cat]]
= cat APIs

[partintro]
--

["float",id="intro"]
== Introduction

对于计算机来说，JSON 是一种很好的格式，虽然它便于打印，但是尝试找出潜在的数据关系是比较麻烦的。
对于人眼，特别是在看 ssh 终端时，需要紧凑和对齐的文本。
cat API 旨在满足这一需求。

所有的 cat 命令都接受一个字符串参数 `help` 来查看全部。
它们提供了头部（headers）和其它信息，以及单独的 `/_cat` 命令列出了所有可用的命令。

[float]
[[common-parameters]]
== 常用参数

[float]
[[verbose]]
=== 详细

每个命令接受一个查询字符串参数 `v` 打开详细输出。 例如：

[source,js]
--------------------------------------------------
GET /_cat/master?v
--------------------------------------------------
// CONSOLE

可能响应：

[source,txt]
--------------------------------------------------
id                     host      ip        node
u_n93zwxThWHi1PDBJAGAg 127.0.0.1 127.0.0.1 u_n93zw
--------------------------------------------------
// TESTRESPONSE[s/u_n93zw(xThWHi1PDBJAGAg)?/.+/ _cat]

[float]
[[help]]
=== 帮助

每个命令都接受一个字符串参数 `help` ，它将会输出其可用列。 例如：

[source,js]
--------------------------------------------------
GET /_cat/master?help
--------------------------------------------------
// CONSOLE

可能响应：

[source,txt]
--------------------------------------------------
id   |   | node id
host | h | host name
ip   |   | ip address
node | n | node name
--------------------------------------------------
// TESTRESPONSE[s/[|]/[|]/ _cat]

NOTE: `help` is not supported if any optional url parameter is used.
For example `GET _cat/shards/twitter?help` or `GET _cat/indices/twi*?help`
results in an error. Use `GET _cat/shards?help` or `GET _cat/indices?help`
instead.

[float]
[[headers]]
=== 头部

每个命令接受字符串参数 `h` 强制显示指定列。 例如：

[source,js]
--------------------------------------------------
GET /_cat/nodes?h=ip,port,heapPercent,name
--------------------------------------------------
// CONSOLE

响应：

[source,txt]
--------------------------------------------------
127.0.0.1 9300 27 sLBaIGK
--------------------------------------------------
// TESTRESPONSE[s/9300 27 sLBaIGK/\\d+ \\d+ .+/ _cat]

你也可以使用简单的通配符来请求多个列 `/_cat/thread_pool?h=ip,queue.*`
获取所有头部（或别名）以 `queue.` 开头。

[float]
[[numeric-formats]]
=== 数字格式

许多命令提供几种类型的数字输出，字节，大小或时间。
默认情况下，这些类型是对人类友好的 （human-formatted），例如， `3.5mb` 而不是 `3763212` 。
这些人类可读的值无法以数值排序，所以为了操作这些在顺序上很重要的数值，你可以改变它。

假设你想要查找群集中的最大索引（所有分片使用的存储空间，而不是文档数量）。
`/_cat/indices` API 是理想的。我们只需要调整两件事。
首先，我们要关闭 human 模式。我们将使用字节级别的分辨率。
然后，我们使用适当的列将输出结果用管道输入到 `sort` 中，在这个例子中是第八列。

[source,sh]
--------------------------------------------------
% curl '192.168.56.10:9200/_cat/indices?bytes=b' | sort -rnk8
green wiki2 3 0 10000   0 105274918 105274918
green wiki1 3 0 10000 413 103776272 103776272
green foo   1 0   227   0   2065131   2065131
--------------------------------------------------
// NOTCONSOLE

如果你要更改 <<time-units,time units>>，请使用 `time` 参数。

如果你要更改 <<size-units,size units>>，请使用 `size` 参数。

如果你要更改 <<byte-units,byte units>>，请使用 `bytes` 参数。

[float]
=== 以 text， json， smile， yaml 或者 cbor 响应

[source,sh]
--------------------------------------------------
% curl 'localhost:9200/_cat/indices?format=json&pretty'
[
  {
    "pri.store.size": "650b",
    "health": "yellow",
    "status": "open",
    "index": "twitter",
    "pri": "5",
    "rep": "1",
    "docs.count": "0",
    "docs.deleted": "0",
    "store.size": "650b"
  }
]
--------------------------------------------------
// NOTCONSOLE

目前支持的格式 (for the `?format=` parameter):
- text (default)
- json
- smile
- yaml
- cbor

或者，你可以设置 "Accept" HTTP 头为适当的媒体格式。
以上所有格式均受支持，GET 参数优先于头部。
例如：

[source,sh]
--------------------------------------------------
% curl '192.168.56.10:9200/_cat/indices?pretty' -H "Accept: application/json"
[
  {
    "pri.store.size": "650b",
    "health": "yellow",
    "status": "open",
    "index": "twitter",
    "pri": "5",
    "rep": "1",
    "docs.count": "0",
    "docs.deleted": "0",
    "store.size": "650b"
  }
]
--------------------------------------------------
// NOTCONSOLE

[float]
[[sort]]
=== 排序

每个命令都接受一个字符串参数 `s` ，它可以指定为参数值的列对表格进行排序。
列由名称或别名指定，并以逗号分隔的字符串形式提供。
默认情况下，排序按照升序方式完成。
追加 `:desc` 到一列会将该列以降序排序。
`:asc` 也被接受，但表现出与默认排序顺序相同的行为。

例如，对于一个排序字符串 `s=column1,column2:desc,column3` ，
该表格将按 column1 升序， column2 降序， column3 升序排序。

[source,sh]
--------------------------------------------------
GET _cat/templates?v&s=order:desc,index_patterns
--------------------------------------------------
//CONSOLE

返回：

[source,txt]
--------------------------------------------------
name                  index_patterns order version
pizza_pepperoni       [*pepperoni*]  2
sushi_california_roll [*avocado*]    1     1
pizza_hawaiian        [*pineapples*] 1
--------------------------------------------------

--

include::cat/alias.asciidoc[]

include::cat/allocation.asciidoc[]

include::cat/count.asciidoc[]

include::cat/fielddata.asciidoc[]

include::cat/health.asciidoc[]

include::cat/indices.asciidoc[]

include::cat/master.asciidoc[]

include::cat/nodeattrs.asciidoc[]

include::cat/nodes.asciidoc[]

include::cat/pending_tasks.asciidoc[]

include::cat/plugins.asciidoc[]

include::cat/recovery.asciidoc[]

include::cat/repositories.asciidoc[]

include::cat/thread_pool.asciidoc[]

include::cat/shards.asciidoc[]

include::cat/segments.asciidoc[]

include::cat/snapshots.asciidoc[]

include::cat/templates.asciidoc[]
